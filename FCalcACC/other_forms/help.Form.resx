<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label24.Text" xml:space="preserve">
    <value>In this section all pit stops with fuel and laps for each stint will appear. User can move pit stop up and down. That will recalculate fuel and will show how much fuel is needed for start or how much refuel before next stint with new pit timing.

There are few limitations set that will prevent moving the pit stop beyond practical feasibility. Limiting factors are maximum stint timer, tank capacity or other pit stops.</value>
  </data>
  <data name="label23.Text" xml:space="preserve">
    <value>Lap time is taken from Input data panel. Fuel for the race is a fuel for that given average lap time.

Lap time for +1 lap is average lap time that is required for the race to have one more lap than for what was set up. This is additional information for user to consider if race could have one more lap.

Lap time for -1 lap is the opposite to +1 where race is shorter by one lap.</value>
  </data>
  <data name="label22.Text" xml:space="preserve">
    <value>Overall race duration shows time race will last. It can be equal to race duration from input panel but usually race last more.

Number of laps shows how many laps will race have. Formation lap isnt included.</value>
  </data>
  <data name="label19.Text" xml:space="preserve">
    <value>This part isnt obligatory. If user sets only 'Number of pit stops' and leave 'Pit stops option' blank then a default pit option is 'Refuel + tires'. If user selects a pit option but leave 'Number of pit stops' to 0 then a number of pit stops will be calcululated automatically. If user set a 'Max stint duration' and leave 'Number of pits' to 0 and 'Pit stops options' blank then it will automatically calculate number of pit stops with a defualt pit option that maximazes stint duration (unless tank capacity is a limiting factor).</value>
  </data>
  <data name="label17.Text" xml:space="preserve">
    <value>Intomation in variables is obligatory for calculations. 'Lap time' should be an average lap time. If no 'Formation lap' is selected before calculation then 'Full' is being selected. If one of the variables is 0 then respective box will flash with red colour and prevent calculation.</value>
  </data>
  <data name="label15.Text" xml:space="preserve">
    <value>Here user can select their car and track. This information isnt obligatory for the calculation but it will give more information for more accurate results. Additional information are fuel tank capacity for a given car/track combination and accurate time lost during pit stop. It will also fill 'Lap time' and 'Fuel per lap' with either default data or from the last calculation.</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>Import stint data button is disabled until user selects one of the stints from the list above. It takes all information from that stint and fill 'Input panel'. If user checks 'Take my average lap time' then average lap time from that stint will be included. Note that the best option is to be using leaders average lap time unless you are going to be lapped by the leader.</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>Auto button is disabled until session is 'Race'. After clicking this button all information needed to calculate fuel are being taken from sim and autmatically calculates and fill 'Results' panel. If there is at least one mandatory pit stop for this race, then a pop-up window will appear asking for desired pit stop option before calculation. If there are recent stints that match car and track then average fuel per lap will be taken from the longest stint. If user checks 'Take my average lap time' then also average lap time from that stint will be included. Note that the best option is to be using leaders average lap time unless you are going to be lapped by the leader. </value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>Recent stints panel shows user recent stints in ACC. Stint must consist of at least one completed lap. Stint appears on a list when its finished. To finish a stint user needs to go back to pit lane. All recorded completed laps are then converted into a stint. If user leaves current session or shuts down ACC all recorded and fully completed laps will also be converted into a new stint.</value>
  </data>
</root>